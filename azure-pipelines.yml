# Trigger the pipeline when there is a commit or merge to the 'main' branch
trigger:
- main

# Define the agent pool and specify the private agent
pool:
  name: Default
  demands:
    - Agent.Name -equals DESKTOP-B5DR2AP  # Ensures the pipeline runs only on this specific agent

steps:

# 1️⃣ Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'  # Install Node.js version 20.x
  displayName: 'Install Node.js'

# 2️⃣ Install dependencies and build the Node.js project
- script: |
    npm install  # Install all dependencies from package.json
    npm run build  # Run the build command specified in package.json
  displayName: 'npm install and build'

- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
# - task: Maven@3
#   inputs:
#     mavenPomFile: 'pom.xml'   # Path to the pom.xml file (update if located in a subfolder)
#     goals: 'clean package'     # Cleans previous builds and creates a new JAR/WAR file
#     publishJUnitResults: true  # Enables publishing of JUnit test results
#     testResultsFiles: '**/surefire-reports/TEST-*.xml'  # Specifies JUnit test result files
#     javaHomeOption: 'JDKVersion'  # Uses the installed Java version
#     mavenVersionOption: 'Default'  # Uses the default installed Maven version
#   displayName: 'Build Maven project'


# 4️⃣ Debug: List all files to confirm that the target folder exists
- script: ls -R $(Build.SourcesDirectory)
  displayName: 'List all files after Maven build'
  # This step prints the directory structure for debugging purposes

# 5️⃣ Check if Build Artifacts Exist and Set a Variable
- script: |
    if [ -d "$(Build.SourcesDirectory)/target" ]; then
      echo "##vso[task.setvariable variable=ArtifactsExist]true"
    else
      echo "##vso[task.setvariable variable=ArtifactsExist]false"
    fi
  displayName: 'Check if target directory exists'
  condition: succeeded()

# 6️⃣ Copy the generated JAR/WAR files to the artifact staging directory (Only If Artifacts Exist)
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/target'  # The directory where Maven outputs the built files
    Contents: '**/*.jar'  # Copies all JAR files (change to **/*.war if using a WAR file)
    TargetFolder: '$(Build.ArtifactStagingDirectory)'  # The destination where artifacts are staged for publishing
  condition: and(succeeded(), eq(variables['ArtifactsExist'], 'true'))
  displayName: 'Copy build artifacts'
  # This step runs only if the target folder exists and the build succeeded

# 7️⃣ Debug: List files in the artifact staging directory before publishing
- script: ls -lh $(Build.ArtifactStagingDirectory)
  displayName: 'List files before publishing'
  condition: succeeded()
  # This step verifies that the artifact files exist before publishing

# 8️⃣ Publish artifacts to Azure DevOps (Only If Artifacts Exist)
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'  # Publishes files from the staging directory
    artifactName: 'drop'  # Sets the artifact name as 'drop'
  condition: and(succeeded(), eq(variables['ArtifactsExist'], 'true'))
  displayName: 'Publish artifacts'
  # This step ensures artifacts are only published if they exist
